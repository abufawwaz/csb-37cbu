{"version":3,"sources":["components/Context.js","components/UsersList.js","components/AddUser.js","components/App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","Provider","UsersList","state","users","fetchUsers","fetch","then","response","json","data","success","this","setState","reverse","context","post_show","bind","Object","assertThisInitialized","_this","catch","error","console","log","handleUpdate","id","Axios","post","user_name","name","value","user_email","email","_ref","map","user","isEditing","alert","msg","editMode","cancleEdit","handleDelete","deleteUser","filter","_ref2","newUser","new_user","concat","toConsumableArray","_this2","allUsers","_ref3","index","react_default","a","createElement","key","className","type","ref","item","defaultValue","onClick","Fragment","Component","contextType","AddUser","insertUser","event","preventDefault","persist","username","useremail","addNewUser","target","reset","onSubmit","val","placeholder","App","post_found","postShow","show","showUsers","contextValue","components_UsersList","role","AddUser_AddUser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.adf88fc2.chunk.js","sourcesContent":["import React from 'react';\nexport const AppContext = React.createContext();\nexport const Provider = AppContext.Provider;\n","import React, {Component} from 'react';\nimport Axios from 'axios';\nimport {AppContext} from './Context';\nclass UsersList extends Component{\n    static contextType = AppContext;   \n    \n    state = {\n        users:[]\n    }\n    \n    fetchUsers = () => {\n        fetch('https://www.bakulansayur.com/apijs/all-users.php')\n        .then(response => {\n            response.json().then(function(data) {\n                if(data.success === 1){\n                    this.setState({\n                        users:data.users.reverse()\n                    });\n                } \n                else{\n                    this.context.post_show(false);\n                }               \n            }.bind(this));\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n    componentDidMount(){\n        this.fetchUsers();\n    }\n\n    handleUpdate = (id) => {\n        Axios.post('https://www.bakulansayur.com/apijs/update-user.php',\n        {\n            id:id,\n            user_name:this.name.value,\n            user_email:this.email.value\n        })\n        .then(({data}) => {\n            if(data.success === 1){\n                let users = this.state.users.map(user => {\n                    if(user.id === id){\n                        user.user_name = this.name.value;\n                        user.user_email = this.email.value;\n                        user.isEditing = false;\n                        return user;\n                    }\n                    return user; \n                });\n                this.setState({\n                    users\n                });\n            }\n            else{\n                alert(data.msg);\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n    \n    editMode = (id) => {\n        let users = this.state.users.map(user => {\n            if(user.id === id){\n                user.isEditing = true;\n                return user;\n            }\n            user.isEditing = false;\n            return user;\n            \n        });\n\n        this.setState({\n            users\n        });\n       \n    }\n\n    cancleEdit = (id) => {\n        let users = this.state.users.map(user => {\n            if(user.id === id){\n                user.isEditing = false;\n                return user;\n            }\n            return user\n            \n        });\n        this.setState({\n            users\n        });\n    }\n\n    handleDelete = (id) => {\n        let deleteUser = this.state.users.filter(user => {\n            return user.id !== id;\n        });\n        \n        Axios.post('https://www.bakulansayur.com/apijs/delete-user.php',{\n            id:id\n        })\n        .then(({data}) => {\n            if(data.success === 1){\n                this.setState({\n                    users:deleteUser\n                });\n            }\n            else{\n                alert(data.msg);\n            }\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n\n    componentDidUpdate(){\n        let newUser = this.context.new_user;\n        if(newUser){ \n            this.setState({\n                users:[\n                    newUser,\n                    ...this.state.users\n                    \n                ]\n            });          \n            this.context.new_user = false;\n        }        \n    }\n\n    render(){\n\n        let allUsers = this.state.users.map(({id,user_name,user_email,isEditing}, index) => {\n            \n            return isEditing === true ? (   \n            <tr key={id}>\n                <td><input className=\"form-control\" type=\"text\" ref={(item) => this.name = item} defaultValue={user_name}/></td>\n                <td><input className=\"form-control\" type=\"email\" ref={(item) => this.email = item} defaultValue={user_email}/></td>\n                <td>\n                    <button className=\"btn btn-success mr-2\" onClick={() => this.handleUpdate(id)}>Save</button>\n                    <button onClick={() => this.cancleEdit(id)} className=\"btn btn-light\">Cancel</button>\n                </td>\n            </tr>\n            ):\n            ( \n                <tr key={id}>\n                    <td>{user_name}</td>\n                    <td>{user_email}</td>\n                    <td>\n                        <button className=\"btn btn-dark mr-2\" onClick={() => this.editMode(id)}>Edit</button>\n                        <button onClick={() => this.handleDelete(id)} className=\"btn btn-danger\">Delete</button>\n                    </td>\n                </tr>\n            );\n        });\n\n        \n\n        return(\n            <>\n            {allUsers}\n            </>\n        );\n        \n    }\n}\n\nexport default UsersList;\n","import React,{Component} from 'react';\nimport Axios from 'axios';\nimport {AppContext} from './Context';\n\nexport default class AddUser extends Component{\n    static contextType = AppContext;   \n    \n    insertUser = (event) => {\n        event.preventDefault();\n        event.persist();\n        Axios.post('https://www.bakulansayur.com/apijs/add-user.php',{\n            user_name:this.username.value,\n            user_email:this.useremail.value\n        })\n        .then(function ({data}) {\n            if(data.success === 1){\n                \n                this.context.addNewUser(data.id,this.username.value,this.useremail.value);\n                event.target.reset();\n                // alert(data.msg);\n            }\n            else{\n                alert(data.msg);\n            }\n        }.bind(this))\n        .catch(function (error) {\n        console.log(error);\n        });\n\n    }\n\n    render(){\n\n        return(\n            <form onSubmit={this.insertUser}>\n            <div className=\"form-row\">\n                <div className=\"form-group col-sm-6\">\n                    <label className=\"font-weight-bold\">Name</label>\n                    <input type=\"text\" name=\"username\" ref={(val) => this.username = val} className=\"form-control\" placeholder=\"Name\"/>\n                </div>\n                <div className=\"form-group col-sm-6\">\n                    <label className=\"font-weight-bold\">Email</label>\n                    <input type=\"email\" name=\"useremail\" ref={(val) => this.useremail = val} className=\"form-control\" placeholder=\"Email\"/>\n                </div>\n                <div className=\"form-group col-sm-12 text-right\">\n                    <button type=\"submit\" className=\"btn btn-primary\">Add user</button>\n                </div>\n            </div>\n        </form>        \n        );\n    }\n}","import React,{Component} from 'react';\nimport UsersList from './UsersList';\nimport AddUser from './AddUser';\nimport {Provider} from './Context';\nclass App extends Component {\n    state = {\n        post_found:true,\n        new_user:false\n    }\n    addNewUser = (id,name,email) => {\n        if(this.state.post_found){\n            this.setState({\n                new_user:{id:id,user_name:name,user_email:email}\n            });\n        }\n        else{\n            this.setState({\n                post_found:true\n            });\n        }\n        \n    }\n\n    postShow = (show) => {\n        this.setState({\n            post_found:show\n        })\n    }\n    \n    render(){\n        const contextValue = {\n            new_user:this.state.new_user,\n            addNewUser:this.addNewUser,\n            post_show:this.postShow\n        }\n\n        let showUsers;\n        if(this.state.post_found){\n            showUsers = (\n                <table className=\"table table-striped table-bordered\">\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <UsersList/>\n                    </tbody>\n                </table>\n            );\n        }\n        else{\n            showUsers = (\n                <div className=\"alert alert-light\" role=\"alert\">\n                    <h4 className=\"alert-heading\">No User Found!</h4>\n                    <hr/>\n                    <p>Please Insert Some Users.</p>\n                </div>\n            );\n        }\n        return (\n            <Provider value={contextValue}>\n            <div className=\"container-fluid bg-light\">\n            <div className=\"container p-5\">\n                <div className=\"card shadow-sm\">\n                    <h1 className=\"card-header text-center text-uppercase text-muted\">React PHP CRUD Application</h1>\n                    <div className=\"card-body\">\n                        <div className=\"row\">\n                            <div className=\"col-md-4\">\n                                <AddUser/>\n                            </div>\n                            <div className=\"col-md-8\">\n                                {showUsers}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n    \n            </div>\n            </div>\n        </Provider>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"https://www.bakulansayur.com/apijs/\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}